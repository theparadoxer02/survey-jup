// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  walletAddress   String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  surveys         Survey[]
  responses       SurveyResponse[]
  transactions    Transaction[]
  stakes          Stake[]
  rewards         Reward[]
}

model Survey {
  id          String    @id @default(cuid())
  title       String
  description String
  reward      Float     // Amount of tokens rewarded for completion
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  expiresAt   DateTime?
  isActive    Boolean   @default(true)
  createdBy   User      @relation(fields: [userId], references: [id])
  userId      String
  responses   SurveyResponse[]
  questions   Question[]
}

model Question {
  id          String    @id @default(cuid())
  surveyId    String
  survey      Survey    @relation(fields: [surveyId], references: [id])
  text        String
  type        String    // "multiple_choice", "text", "rating"
  options     String    // JSON string of options for multiple choice questions
  required    Boolean   @default(true)
  order       Int
  responses   QuestionResponse[]
}

model SurveyResponse {
  id        String    @id @default(cuid())
  surveyId  String
  survey    Survey    @relation(fields: [surveyId], references: [id])
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  answers   QuestionResponse[]
}

model QuestionResponse {
  id              String    @id @default(cuid())
  responseId      String
  surveyResponse  SurveyResponse @relation(fields: [responseId], references: [id])
  questionId      String
  question        Question  @relation(fields: [questionId], references: [id])
  answer          String
}

model Transaction {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  type        String    // "REWARD", "STAKE", "TRANSFER"
  amount      Float
  status      String    // "PENDING", "COMPLETED", "FAILED"
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Stake {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  amount      Float
  startDate   DateTime  @default(now())
  endDate     DateTime?
  status      String    // "ACTIVE", "WITHDRAWN", "EXPIRED"
  apy         Float     // Annual Percentage Yield at time of staking
}

model Reward {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  amount      Float
  type        String    // "SURVEY_COMPLETION", "STAKING", "REFERRAL"
  createdAt   DateTime  @default(now())
  description String?
}
